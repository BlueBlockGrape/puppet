#!/usr/bin/python3

import hmac
import http.client
import http.server
import json
import logging
import os
import re
import signal
import subprocess
import threading
import urllib

_COMMIT_RE = re.compile('^/([0-9a-f]{2})([0-9a-f]{38})$')
_GITHUB_SECRET = None
_GITHUB_TOKEN = None
_HOSTNAME = None
_SLACK_WEBHOOK_URL = None
_WEBHOOK_ROOT = '/var/lib/omegaup/webhook'

_CONDITION = threading.Condition()
_HTTP_SERVER = None
_QUEUE = []


def _github_report_status(commit, state, description):
    payload = json.dumps({
        'state': state,
        'target_url': 'https://%s/webhook/%s' % (_HOSTNAME, commit),
        'description': description,
        'context': 'deployment/%s/push' % (_HOSTNAME,)
    }).encode('utf-8')
    headers = {
        'Authorization': 'token %s' % _GITHUB_TOKEN,
        'Content-Type': 'application/json; charset=utf-8',
        'Content-Length': str(len(payload)),
        'User-Agent': 'omegaup-webhook',
        'Connection': 'close',
    }
    conn = http.client.HTTPSConnection('api.github.com', 443)
    try:
        conn.request('POST', '/repos/omegaup/omegaup/statuses/%s' % commit, payload, headers)
        response = conn.getresponse()
        logging.info('Response: Status %d %s. Contents: %r', response.status,
                     response.reason, response.read())
    except http.client.HTTPException:
        logging.exception('Failed to send status for commit %s', commit)
    finally:
        conn.close()


def _slack_report_status(commit, state):
    _COLOR_MAPPING = {
        'success': 'good',
        'failure': 'danger'
    }
    format_args = {
        'commit': commit,
        'short_commit': commit[:8],
        'hostname': _HOSTNAME,
        'state': state,
    }
    payload = json.dumps({
        'attachments': [{
            'fallback': ('Deployment of commit {short_commit} on {hostname}: '
                         '{state}').format_map(format_args),
            'text': ('Deployment finished on {hostname}: '
                     '{state}').format_map(format_args),
            'fields': [
                {
                    'title': 'Commit',
                    'value': '<https://github.com/omegaup/omegaup/commit/{commit}|{short_commit}>'.format_map(
                        format_args),
                    'short': True
                },
                {
                    'title': 'Logs',
                    'value': '<https://{hostname}/webhook/{commit}|View>'.format_map(
                        format_args),
                    'short': True
                },
            ],
            'color': _COLOR_MAPPING.get(state, 'danger')
        }]
    }).encode('utf-8')
    headers = {
        'Content-Type': 'application/json',
        'Content-Length': str(len(payload)),
        'User-Agent': 'omegaup-webhook',
        'Connection': 'close',
    }
    url = urllib.parse.urlparse(_SLACK_WEBHOOK_URL)
    conn = http.client.HTTPSConnection(url.hostname, 443)
    try:
        conn.request('POST', url.path, payload, headers)
        response = conn.getresponse()
        logging.info('Response: Status %d %s. Contents: %r', response.status,
                     response.reason, response.read())
    except http.client.HTTPException:
        logging.exception('Failed to send slack status for commit %s', commit)
    finally:
        conn.close()


class GitHubWebhookHandler(http.server.BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            content_len = int(self.headers.get('Content-Length', 0))
            raw_payload = self.rfile.read(content_len)
            expected_hmac = 'sha1=%s' % hmac.new(_GITHUB_SECRET, raw_payload,
                                                 digestmod='sha1').hexdigest()
            if self.headers.get('X-Hub-Signature', '') == expected_hmac:
                payload = json.loads(str(raw_payload, encoding='utf-8'))
                try:
                    self.handle_hook_event(
                        self.headers.get('X-GitHub-Event', 'ping'), payload)
                    self.send_response(200)
                except:
                    logging.exception('Error while handling the event')
                    self.send_response(500)
            else:
                self.send_response(401)
        except:
            logging.exception('Error while reading the payload')
            self.send_response(400)
        finally:
            self.end_headers()

    def do_GET(self):
        logging.info(self.path)
        match = _COMMIT_RE.match(self.path)
        try:
            if not match:
                logging.error('Not a valid commit: %s', self.path)
                self.send_response(404)
                self.send_header('Content-Length', '0')
                self.end_headers()
                return
            logpath = os.path.join(_WEBHOOK_ROOT, match.group(1), match.group(2))
            if not os.path.isfile(logpath):
                logging.error('File not found: %s', logpath)
                self.send_response(404)
                self.send_header('Content-Length', '0')
                self.end_headers()
                return
            with open(logpath, 'rb') as logfile:
                log_contents = logfile.read()
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain; charset=utf-8')
            self.send_header('Content-Length', str(len(log_contents)))
            self.end_headers()
            self.wfile.write(log_contents)
        except:
            logging.exception('Failed to send reply')

    def handle_hook_event(self, event, payload):
        global _QUEUE, _CONDITION

        logging.info('Request %s, %r', event, payload)
        if event == 'push':
            with _CONDITION:
                _QUEUE.append(payload['after'])
                _CONDITION.notify()


class DeployThread(threading.Thread):
    def run(self):
        global _QUEUE, _CONDITION
        while True:
            with _CONDITION:
                while not _QUEUE:
                    _CONDITION.wait()

                commit = _QUEUE.pop()
                if commit is None:
                    logging.info('Received empty commit. Sending shutdown '
                                 'signal to the server.')
                    _HTTP_SERVER.shutdown()
                    logging.info('Terminating deploy loop.')
                    return
                logging.info('Deploying %s...', commit)
                _github_report_status(commit, 'pending',
                                      'Starting deployment on %s' % (_HOSTNAME,))
                logpath = os.path.join(_WEBHOOK_ROOT, commit[:2],
                                       commit[2:])
                os.makedirs(os.path.dirname(logpath), exist_ok=True)
                with open(logpath, 'wb') as logfile:
                    res = subprocess.run(['/usr/bin/sudo',
                                          '/usr/bin/omegaup-deploy-latest'],
                                          stdout=logfile,
                                          stderr=subprocess.STDOUT)
                if res.returncode != 0:
                    logging.error('Error calling omegaup-deploy-latest for %s', commit)
                    _github_report_status(commit, 'failure',
                                          'Deployment on %s failed' % (_HOSTNAME,))
                    _slack_report_status(commit, 'failure')
                    continue

                logging.info('Successfully deployed %s', commit)
                _github_report_status(commit, 'success',
                                      'Deployment on %s succeeded' % (_HOSTNAME,))
                _slack_report_status(commit, 'success')


def _signal_handler(signum, frame):
    logging.info('Received signal %d', signum)
    with _CONDITION:
        _QUEUE.append(None)
        _CONDITION.notify()


def main():
    global _GITHUB_SECRET, _GITHUB_TOKEN, _HOSTNAME, _HTTP_SERVER, _SLACK_WEBHOOK_URL

    logging.basicConfig(level=logging.INFO)

    with open('/etc/omegaup/webhook/config.json') as config_file:
        config = json.load(config_file)
        _HOSTNAME = config['Hostname']
        _GITHUB_SECRET = bytes(config['GitHub']['Secret'], encoding='utf-8')
        _GITHUB_TOKEN = config['GitHub']['OAuthToken']
        _SLACK_WEBHOOK_URL = config['Slack']['WebhookURL']

    logging.info('Starting the webhook service')
    deploy_thread = DeployThread(daemon=True)
    deploy_thread.start()
    server_address = ('localhost', 58517)
    logging.info('Listening on %r' % (server_address,))
    _HTTP_SERVER = http.server.HTTPServer(server_address, GitHubWebhookHandler)

    signal.signal(signal.SIGHUP, _signal_handler)
    signal.signal(signal.SIGTERM, _signal_handler)

    _HTTP_SERVER.serve_forever()
    deploy_thread.join()


if __name__ == '__main__':
    main()

# vim:expandtab ts=4 sw=4
